- name: Install ranger
  community.general.homebrew:
    name: ranger
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install fzf
  community.general.homebrew:
    name: fzf
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install chafa
  community.general.homebrew:
    name: chafa
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install beekeeper
  ansible.builtin.command: 'brew install --cask beekeeper-studio'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install ninja build system tool
  community.general.homebrew:
    name: ninja
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install make
  community.general.homebrew:
    name: make
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install pandoc
  community.general.homebrew:
    name: pandoc
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install stow
  community.general.homebrew:
    name: stow
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install trash
  community.general.homebrew:
    name: trash
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install ripgrep
  community.general.homebrew:
    name: ripgrep
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install jq
  community.general.homebrew:
    name: jq
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install meson
  community.general.homebrew:
    name: meson
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install Slack
  ansible.builtin.command: 'brew install --cask slack'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

# installs, but throws a missing checksum error
- name: Install Chrome
  ansible.builtin.command: 'brew install --cask google-chrome'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install Postman
  ansible.builtin.command: 'brew install --cask postman'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install MongoDB Compass
  ansible.builtin.command: 'brew install --cask mongodb-compass'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install MongoDB Tools
  ansible.builtin.shell: |
    brew tap mongodb/brew
    brew install mongodb-database-tools
    brew upgrade mongodb-database-tools
  tags:
    - mac-setup

- name: Install mongosh CLI
  community.general.homebrew:
    name: mongosh
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install pyenv
  community.general.homebrew:
    name: pyenv
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Check if python version is installed
  ansible.builtin.stat:
    path: '{{ home }}/.pyenv/versions/{{ python_version }}'
  register: python_version_exists
  tags:
    - mac-setup

- name: Install python version
  ansible.builtin.shell: 'pyenv install {{ python_version }}'
  when:
    - ansible_distribution == 'MacOSX'
    - not python_version_exists.stat.exists
  tags:
    - mac-setup

- name: Update zshrc - set pyenv root
  ansible.builtin.shell: echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrc
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Update zshrc - export it on path
  ansible.builtin.shell: echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.zshrc
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Update zshrc - set pyenv init in terminal
  ansible.builtin.shell: echo 'if command -v pyenv 1>/dev/null 2>&1; then\n  eval "$(pyenv init --path)"\n  eval "$(pyenv init -)"\nfi' >> ~/.zshrc
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install VSCode
  ansible.builtin.command: 'brew install --cask visual-studio-code'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install android-sdk
  ansible.builtin.command: 'brew install --cask android-sdk'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install android-studio
  ansible.builtin.command: 'brew install --cask android-studio'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install temurin8 (android-sdk dependancy)
  ansible.builtin.command: 'brew install --cask homebrew/cask-versions/temurin8'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install cyberduck
  ansible.builtin.command: 'brew install --cask cyberduck'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

# if you need to enable globally do:
# defaults write -g ApplePressAndHoldEnabled -bool false
- name: Install VSCode - allow key repeat
  ansible.builtin.command: 'defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: cmake
  community.general.homebrew:
    name: cmake
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install Nerd Fonts
  ansible.builtin.shell: |
    brew tap homebrew/cask-fonts
    brew install --cask font-fantasque-sans-mono-nerd-font
    brew install --cask font-fira-code-nerd-font
    brew install --cask font-terminess-ttf-nerd-font
    brew install --cask font-hack-nerd-font
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install and start SHKD
  ansible.builtin.shell: |
    brew install koekeishiya/formulae/skhd
    skhd --start-service
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: htop
  community.general.homebrew:
    name: htop
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install 7z
  community.general.homebrew:
    name: sevenzip
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install Zsh Completions
  community.general.homebrew:
    name: zsh-completions
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

# - name: Force Rebuild zcompdump
#   ansible.builtin.shell: rm -f ~/.zcompdump && zsh -c "builtin autoload -XUz /usr/share/zsh/5.9/functions"
#   when: ansible_distribution == 'MacOSX'
#   tags:
#     - mac-setup
#
# add `export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"` and `export CPPFLAGS="-I/opt/homebrew/opt/openjdk@11/include"`
# to .zshrc for this to show up on the path and allow compilers to find it.
- name: Install Java 11
  community.general.homebrew:
    name: java11
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Symlink the Java Installation
  become: true
  ansible.builtin.command: 'ln -sfn /opt/homebrew/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk'
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install OpenAPI Generator Tools
  community.general.homebrew:
    name: openapi-generator
    state: present
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Install Redis CLI Tools
  community.general.homebrew:
    name: redis
    state: present
  tags:
    - mac-setup

- name: Install GitHub CLI
  community.general.homebrew:
    name: gh
    state: present
  tags:
    - mac-setup

- name: Install SketchyBar
  ansible.builtin.shell: |
    brew tap FelixKratz/formulae
    brew install sketchybar
    brew services start sketchybar
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup


- name: Install sketchybar-app-font
  ansible.builtin.get_url:
    url: https://github.com/kvndrsslr/sketchybar-app-font/releases/download/v1.0.17/sketchybar-app-font.ttf
    # dest: '{{ home }}/Library/Fonts'
    dest: '/Library/Fonts'
  tags:
    - mac-setup

- name: Install Yabai
  ansible.builtin.shell: |
    brew install koekeishiya/formulae/yabai
    yabai --start-service
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup

- name: Configure Yabai scripting addon
  become: true
  ansible.builtin.shell: |
    visudo -f /private/etc/sudoers.d/yabai
  when: ansible_distribution == 'MacOSX'
  tags:
    - mac-setup
# input the line below into the file you are editing.
#  replace <yabai> with the path to the yabai binary (output of: which yabai).
#  replace <user> with your username (output of: whoami).
#  replace <hash> with the sha256 hash of the yabai binary (output of: shasum -a 256 $(which yabai)).
#   this hash must be updated manually after running brew upgrade.
# <user> ALL=(root) NOPASSWD: sha256:<hash> <yabai> --load-sa
